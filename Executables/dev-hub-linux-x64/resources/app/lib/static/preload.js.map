{"version":3,"sources":["preload.js"],"names":["document","addEventListener","injectScripts","INJECT_JS_PATH","path","join","__dirname","log","require","setNotificationCallback","createCallback","clickCallback","OldNotify","window","Notification","newNotify","title","opt","instance","requestPermission","bind","Object","defineProperty","get","permission","needToInject","fs","existsSync","notifyNotificationCreate","ipcRenderer","send","notifyNotificationClick","on","event","message","appArgs","JSON","parse","info"],"mappings":";;AAgBA;;AACA;;;;AACA;;;;;;AAlBA;;;;AAIA;;;;AAIAA,SAASC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAClD;AACA;AACA;AACAC;AACD,CALD;;AAOA;AACwC;AACf;AACJ;;AAErB,IAAMC,iBAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,EAA+B,kBAA/B,CAAvB;AACA,IAAMC,MAAMC,QAAQ,UAAR,CAAZ;AACA;;;;;;;AAOA,SAASC,uBAAT,CAAiCC,cAAjC,EAAiDC,aAAjD,EAAgE;AAC9D,MAAMC,YAAYC,OAAOC,YAAzB;AACA,MAAMC,YAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAChCP,mBAAeM,KAAf,EAAsBC,GAAtB;AACA,QAAMC,WAAW,IAAIN,SAAJ,CAAcI,KAAd,EAAqBC,GAArB,CAAjB;AACAC,aAASjB,gBAAT,CAA0B,OAA1B,EAAmCU,aAAnC;AACA,WAAOO,QAAP;AACD,GALD;AAMAH,YAAUI,iBAAV,GAA8BP,UAAUO,iBAAV,CAA4BC,IAA5B,CAAiCR,SAAjC,CAA9B;AACAS,SAAOC,cAAP,CAAsBP,SAAtB,EAAiC,YAAjC,EAA+C;AAC7CQ,SAAK;AAAA,aAAMX,UAAUY,UAAhB;AAAA;AADwC,GAA/C;;AAIAX,SAAOC,YAAP,GAAsBC,SAAtB;AACD;;AAED,SAASb,aAAT,GAAyB;AACvB,MAAMuB,eAAeC,aAAGC,UAAH,CAAcxB,cAAd,CAArB;AACA,MAAI,CAACsB,YAAL,EAAmB;AACjB;AACD;AACD;AACA;AACAjB,UAAQL,cAAR;AACD;;AAED,SAASyB,wBAAT,CAAkCZ,KAAlC,EAAyCC,GAAzC,EAA8C;AAC5CY,wBAAYC,IAAZ,CAAiB,cAAjB,EAAiCd,KAAjC,EAAwCC,GAAxC;AACD;AACD,SAASc,uBAAT,GAAmC;AACjCF,wBAAYC,IAAZ,CAAiB,oBAAjB;AACD;;AAEDrB,wBAAwBmB,wBAAxB,EAAkDG,uBAAlD;;AAEAF,sBAAYG,EAAZ,CAAe,QAAf,EAAyB,UAACC,KAAD,EAAQC,OAAR,EAAoB;AAC3C,MAAMC,UAAUC,KAAKC,KAAL,CAAWH,OAAX,CAAhB;AACA3B,MAAI+B,IAAJ,CAAS,iBAAT,EAA4BH,OAA5B;AACD,CAHD;;AAKAN,sBAAYG,EAAZ,CAAe,OAAf,EAAwB,UAACC,KAAD,EAAQC,OAAR,EAAoB;AAC1C;AACA3B,MAAI+B,IAAJ,CAAS,QAAT,EAAmBJ,OAAnB;AACD,CAHD","file":"preload.js","sourcesContent":["/**\n Preload file that will be executed in the renderer process\n */\n\n/**\n * Note: This needs to be attached prior to the imports, as the they will delay\n * the attachment till after the event has been raised.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Due to the early attachment, this triggers a linter error\n  // because it's not yet been defined.\n  // eslint-disable-next-line no-use-before-define\n  injectScripts();\n});\n\n// Disable imports being first due to the above event attachment\nimport { ipcRenderer } from 'electron'; // eslint-disable-line import/first\nimport path from 'path'; // eslint-disable-line import/first\nimport fs from 'fs'; // eslint-disable-line import/first\n\nconst INJECT_JS_PATH = path.join(__dirname, '../../', 'inject/inject.js');\nconst log = require('loglevel');\n/**\n * Patches window.Notification to:\n * - set a callback on a new Notification\n * - set a callback for clicks on notifications\n * @param createCallback\n * @param clickCallback\n */\nfunction setNotificationCallback(createCallback, clickCallback) {\n  const OldNotify = window.Notification;\n  const newNotify = (title, opt) => {\n    createCallback(title, opt);\n    const instance = new OldNotify(title, opt);\n    instance.addEventListener('click', clickCallback);\n    return instance;\n  };\n  newNotify.requestPermission = OldNotify.requestPermission.bind(OldNotify);\n  Object.defineProperty(newNotify, 'permission', {\n    get: () => OldNotify.permission,\n  });\n\n  window.Notification = newNotify;\n}\n\nfunction injectScripts() {\n  const needToInject = fs.existsSync(INJECT_JS_PATH);\n  if (!needToInject) {\n    return;\n  }\n  // Dynamically require scripts\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n  require(INJECT_JS_PATH);\n}\n\nfunction notifyNotificationCreate(title, opt) {\n  ipcRenderer.send('notification', title, opt);\n}\nfunction notifyNotificationClick() {\n  ipcRenderer.send('notification-click');\n}\n\nsetNotificationCallback(notifyNotificationCreate, notifyNotificationClick);\n\nipcRenderer.on('params', (event, message) => {\n  const appArgs = JSON.parse(message);\n  log.info('nativefier.json', appArgs);\n});\n\nipcRenderer.on('debug', (event, message) => {\n  // eslint-disable-next-line no-console\n  log.info('debug:', message);\n});\n"]}